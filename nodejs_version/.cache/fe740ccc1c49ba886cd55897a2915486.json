{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528200878026},{"name":"babel-runtime/core-js/promise"},{"name":"@tensorflow/tfjs","loc":{"line":17,"column":20}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MnistData = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _tfjs = require('@tensorflow/tfjs');\n\nvar tf = _interopRequireWildcard(_tfjs);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst IMAGE_SIZE = 784; /**\n                         * @license\n                         * Copyright 2018 Google LLC. All Rights Reserved.\n                         * Licensed under the Apache License, Version 2.0 (the \"License\");\n                         * you may not use this file except in compliance with the License.\n                         * You may obtain a copy of the License at\n                         *\n                         * http://www.apache.org/licenses/LICENSE-2.0\n                         *\n                         * Unless required by applicable law or agreed to in writing, software\n                         * distributed under the License is distributed on an \"AS IS\" BASIS,\n                         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                         * See the License for the specific language governing permissions and\n                         * limitations under the License.\n                         * =============================================================================\n                         */\n\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst TRAIN_TEST_RATIO = 5 / 6;\n\nconst NUM_TRAIN_ELEMENTS = Math.floor(TRAIN_TEST_RATIO * NUM_DATASET_ELEMENTS);\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH = 'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\nconst MNIST_LABELS_PATH = 'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n *\n * NOTE: This will get much easier. For now, we do data fetching and\n * manipulation manually.\n */\nclass MnistData {\n  constructor() {\n    this.shuffledTrainIndex = 0;\n    this.shuffledTestIndex = 0;\n  }\n\n  async load() {\n    this.datasetImages = await new _promise2.default((resolve, reject) => {\n      var img = new Image();\n      var c = document.createElement(\"canvas\");\n      var ctx = c.getContext(\"2d\");\n      img.onload = function () {\n        c.width = this.naturalWidth; // update canvas size to match image\n        c.height = this.naturalHeight;\n        ctx.drawImage(this, 0, 0); // draw in image\n        c.toBlob(function (blob) {// get content as JPEG blob\n          // here the image is a blob\n        }, \"image/jpeg\", 0.75);\n        resolve(img);\n      };\n      img.crossOrigin = \"\"; // if from different origin\n      img.src = MNIST_IMAGES_SPRITE_PATH;\n    }).then(img => {\n      // document.body.appendChild(img);\n      var canvas = document.createElement('canvas');\n      var ctx = canvas.getContext('2d');\n      var datasetBytesBuffer = new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\n\n      var chunkSize = 5000;\n      canvas.width = img.width;\n      canvas.height = chunkSize;\n\n      for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n        var datasetBytesView = new Float32Array(datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4, IMAGE_SIZE * chunkSize);\n        ctx.drawImage(img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width, chunkSize);\n\n        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n        for (let j = 0; j < imageData.data.length / 4; j++) {\n          // All channels hold an equal value since the image is grayscale, so\n          // just read the red channel.\n          datasetBytesView[j] = imageData.data[j * 4] / 255;\n        }\n      }\n\n      return new Float32Array(datasetBytesBuffer);\n    }).catch(e => console.log(e));\n\n    this.datasetLabels = await fetch(MNIST_LABELS_PATH).then(function (response) {\n      return response.arrayBuffer();\n    }).then(function (buffer) {\n      return new Uint8Array(buffer);\n    }).catch(e => console.log(e));\n\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n    // Slice the the images and labels into train and test sets.\n    this.trainImages = this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.trainLabels = this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n    this.testLabels = this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n  }\n\n  nextTrainBatch(batchSize) {\n    return this.nextBatch(batchSize, [this.trainImages, this.trainLabels], () => {\n      this.shuffledTrainIndex = (this.shuffledTrainIndex + 1) % this.trainIndices.length;\n      return this.trainIndices[this.shuffledTrainIndex];\n    });\n  }\n\n  nextTestBatch(batchSize) {\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\n      this.shuffledTestIndex = (this.shuffledTestIndex + 1) % this.testIndices.length;\n      return this.testIndices[this.shuffledTestIndex];\n    });\n  }\n\n  nextBatch(batchSize, data, index) {\n    const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\n\n    for (let i = 0; i < batchSize; i++) {\n      const idx = index();\n\n      const image = data[0].slice(idx * IMAGE_SIZE, idx * IMAGE_SIZE + IMAGE_SIZE);\n      batchImagesArray.set(image, i * IMAGE_SIZE);\n\n      const label = data[1].slice(idx * NUM_CLASSES, idx * NUM_CLASSES + NUM_CLASSES);\n      batchLabelsArray.set(label, i * NUM_CLASSES);\n    }\n\n    const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\n\n    return {\n      xs,\n      labels\n    };\n  }\n}\nexports.MnistData = MnistData;"},"hash":"8f9ad535541b46ddc88651c722f79d85","cacheData":{"env":{}}}