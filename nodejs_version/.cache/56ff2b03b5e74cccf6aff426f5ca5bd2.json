{"dependencies":[{"name":"C:\\Users\\qison\\package.json","includedInParent":true,"mtime":1526331035212},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\marching-simplex-table\\package.json","includedInParent":true,"mtime":1416631382000},{"name":"convex-hull","loc":{"line":5,"column":20}}],"generated":{"js":"'use strict'\n\nmodule.exports = createTable\n\nvar chull = require('convex-hull')\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d)\n  for(var i=0; i<d; ++i) {\n    x[i] = 0.0\n    if(i === a) {\n      x[i] += 0.5\n    }\n    if(i === b) {\n      x[i] += 0.5\n    }\n  }\n  return x\n}\n\nfunction constructCell(dimension, mask) {\n  if(mask === 0 || mask === (1<<(dimension+1))-1) {\n    return []\n  }\n  var points = []\n  var index  = []\n  for(var i=0; i<=dimension; ++i) {\n    if(mask & (1<<i)) {\n      points.push(constructVertex(dimension, i-1, i-1))\n      index.push(null)\n      for(var j=0; j<=dimension; ++j) {\n        if(~mask & (1<<j)) {\n          points.push(constructVertex(dimension, i-1, j-1))\n          index.push([i,j])\n        }\n      }\n    }\n  }\n  \n  //Preprocess points so first d+1 points are linearly independent\n  var hull = chull(points)\n  var faces = []\ni_loop:\n  for(var i=0; i<hull.length; ++i) {\n    var face = hull[i]\n    var nface = []\n    for(var j=0; j<face.length; ++j) {\n      if(!index[face[j]]) {\n        continue i_loop\n      }\n      nface.push(index[face[j]].slice())\n    }\n    faces.push(nface)\n  }\n  return faces\n}\n\nfunction createTable(dimension) {\n  var numCells = 1<<(dimension+1)\n  var result = new Array(numCells)\n  for(var i=0; i<numCells; ++i) {\n    result[i] = constructCell(dimension, i)\n  }\n  return result\n}","map":{"mappings":[{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"nodejs_version\\node_modules\\marching-simplex-table\\mstab.js":"'use strict'\n\nmodule.exports = createTable\n\nvar chull = require('convex-hull')\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d)\n  for(var i=0; i<d; ++i) {\n    x[i] = 0.0\n    if(i === a) {\n      x[i] += 0.5\n    }\n    if(i === b) {\n      x[i] += 0.5\n    }\n  }\n  return x\n}\n\nfunction constructCell(dimension, mask) {\n  if(mask === 0 || mask === (1<<(dimension+1))-1) {\n    return []\n  }\n  var points = []\n  var index  = []\n  for(var i=0; i<=dimension; ++i) {\n    if(mask & (1<<i)) {\n      points.push(constructVertex(dimension, i-1, i-1))\n      index.push(null)\n      for(var j=0; j<=dimension; ++j) {\n        if(~mask & (1<<j)) {\n          points.push(constructVertex(dimension, i-1, j-1))\n          index.push([i,j])\n        }\n      }\n    }\n  }\n  \n  //Preprocess points so first d+1 points are linearly independent\n  var hull = chull(points)\n  var faces = []\ni_loop:\n  for(var i=0; i<hull.length; ++i) {\n    var face = hull[i]\n    var nface = []\n    for(var j=0; j<face.length; ++j) {\n      if(!index[face[j]]) {\n        continue i_loop\n      }\n      nface.push(index[face[j]].slice())\n    }\n    faces.push(nface)\n  }\n  return faces\n}\n\nfunction createTable(dimension) {\n  var numCells = 1<<(dimension+1)\n  var result = new Array(numCells)\n  for(var i=0; i<numCells; ++i) {\n    result[i] = constructCell(dimension, i)\n  }\n  return result\n}"},"lineCount":65}},"hash":"dcf5acb6857fce319a48a828e31108ae","cacheData":{"env":{}}}