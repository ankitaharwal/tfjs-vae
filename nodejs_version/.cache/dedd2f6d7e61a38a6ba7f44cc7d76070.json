{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528206326997},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\to-float32\\package.json","includedInParent":true,"mtime":1512083087000}],"generated":{"js":"/* @module to-float32 */\r\n\r\n'use strict'\r\n\r\nmodule.exports = float32\r\nmodule.exports.float32 =\r\nmodule.exports.float = float32\r\nmodule.exports.fract32 =\r\nmodule.exports.fract = fract32\r\n\r\n// return fractional part of float32 array\r\nfunction fract32 (arr) {\r\n\tif (typeof arr === 'number') {\r\n\t\treturn float32(arr - float32(arr))\r\n\t}\r\n\r\n\tvar fract = float32(arr)\r\n\tfor (var i = 0, l = fract.length; i < l; i++) {\r\n\t\tfract[i] = arr[i] - fract[i]\r\n\t}\r\n\treturn fract\r\n}\r\n\r\n// make sure data is float32 array\r\nfunction float32 (arr) {\r\n\tif (arr instanceof Float32Array) return arr\r\n\tif (typeof arr === 'number') {\r\n\t\treturn (new Float32Array([arr]))[0]\r\n\t}\r\n\r\n\tvar float = new Float32Array(arr)\r\n\tfloat.set(arr)\r\n\treturn float\r\n}\r\n","map":{"mappings":[{"source":"node_modules\\to-float32\\index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\to-float32\\index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules\\to-float32\\index.js":"/* @module to-float32 */\r\n\r\n'use strict'\r\n\r\nmodule.exports = float32\r\nmodule.exports.float32 =\r\nmodule.exports.float = float32\r\nmodule.exports.fract32 =\r\nmodule.exports.fract = fract32\r\n\r\n// return fractional part of float32 array\r\nfunction fract32 (arr) {\r\n\tif (typeof arr === 'number') {\r\n\t\treturn float32(arr - float32(arr))\r\n\t}\r\n\r\n\tvar fract = float32(arr)\r\n\tfor (var i = 0, l = fract.length; i < l; i++) {\r\n\t\tfract[i] = arr[i] - fract[i]\r\n\t}\r\n\treturn fract\r\n}\r\n\r\n// make sure data is float32 array\r\nfunction float32 (arr) {\r\n\tif (arr instanceof Float32Array) return arr\r\n\tif (typeof arr === 'number') {\r\n\t\treturn (new Float32Array([arr]))[0]\r\n\t}\r\n\r\n\tvar float = new Float32Array(arr)\r\n\tfloat.set(arr)\r\n\treturn float\r\n}\r\n"},"lineCount":35}},"hash":"1b05d3a5040f131232c497c303f33c29","cacheData":{"env":{}}}