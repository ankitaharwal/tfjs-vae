{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528200878026},{"name":"babel-runtime/core-js/object/values"},{"name":"babel-runtime/core-js/number/parse-int"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _values = require('babel-runtime/core-js/object/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _parseInt = require('babel-runtime/core-js/number/parse-int');\n\nvar _parseInt2 = _interopRequireDefault(_parseInt);\n\nexports.getEpochs = getEpochs;\nexports.getTestSampleSize = getTestSampleSize;\nexports.setRetrainFunction = setRetrainFunction;\nexports.setTestFunction = setTestFunction;\nexports.setStatus = setStatus;\nexports.logMessage = logMessage;\nexports.plotTrainLoss = plotTrainLoss;\nexports.plotValLoss = plotValLoss;\nexports.updateProgressBar = updateProgressBar;\nexports.draw = draw;\nexports.showTestResults = showTestResults;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import * as tf from '@tensorflow/tfjs';\n// import * as Plotly from 'plotly';\n\nconst statusElement = document.getElementById('status');\nconst loggingElement = document.getElementById('logging-message');\nconst trainingElement = document.getElementById('training');\nconst testingElement = document.getElementById('testing');\nconst trainLossCanvasElement = document.getElementById('trainLossCanvas');\nconst valLossCanvasElement = document.getElementById('valLossCanvas');\n\nfunction getEpochs() {\n  return (0, _parseInt2.default)(document.getElementById('epochs').value);\n}\n\nfunction getTestSampleSize() {\n  return (0, _parseInt2.default)(document.getElementById('test-sample-size').value);\n}\n\nfunction setRetrainFunction(retrain) {\n  const retrainButton = document.getElementById('retrain');\n  retrainButton.addEventListener('click', async () => retrain());\n}\n\nfunction setTestFunction(test) {\n  const retrainButton = document.getElementById('test');\n  retrainButton.addEventListener('click', async () => test());\n}\n\nfunction setStatus(status) {\n  statusElement.innerText = status;\n}\n\nfunction logMessage(message) {\n  loggingElement.innerText += message;\n}\n\nfunction plotTrainLoss(loss) {\n  plotLoss(trainLossCanvasElement, loss, 'blue', 'Train Loss', 'batch', 'loss');\n}\n\nfunction plotValLoss(loss) {\n  plotLoss(valLossCanvasElement, loss, 'red', 'Validation Loss', 'epoch', 'loss');\n}\n\n// export function plotLoss(plotDiv, loss, color, title, xaxis, yaxis) {\n//   if (!plotDiv.hasChildNodes()) {\n//     const trace = {\n//       y: [loss],\n//       type: \"scatter\",\n//       mode: \"lines\",\n//       marker: {\n//         color: color\n//       }\n//     };\n//     const data = [trace];\n//     const layout = {\n//       title: title,\n//       xaxis: {\n//         title: xaxis\n//       },\n//       yaxis: {\n//         title: yaxis\n//       }\n//     };\n//     Plotly.newPlot(plotDiv, data, layout);\n//   } else {\n//     Plotly.extendTraces(plotDiv, {\n//       y: [[loss]]\n//     }, [0])\n//   }\n// }\n\nfunction updateProgressBar(epoch, epochs) {\n  const trainProg = document.getElementById('trainProg');\n  trainProg.value = (epoch + 1) / epochs * 100;\n}\n\nfunction draw(image, canvas) {\n  const [width, height] = [28, 28];\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  const imageData = new ImageData(width, height);\n  const data = image.dataSync();\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    imageData.data[j + 0] = data[i] * 255;\n    imageData.data[j + 1] = data[i] * 255;\n    imageData.data[j + 2] = data[i] * 255;\n    imageData.data[j + 3] = 255;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nasync function showTestResults(zs, outputs) {\n  testingElement.style.display = \"block\";\n  const testExamples = zs.shape[0];\n  for (let i = 0; i < testExamples; i++) {\n    const image = outputs.slice([i, 0], [1, outputs.shape[1]]);\n\n    const div = document.createElement('div');\n    div.className = 'result-container';\n\n    const canvas = document.createElement('canvas');\n    canvas.className = 'result-canvas';\n    draw(image.flatten(), canvas);\n\n    const z = (0, _values2.default)((await zs.slice([i], [1]).dataSync())).map(el => {\n      return Number(el.toFixed(2));\n    });\n    const latent = document.createElement('div');\n    latent.className = 'latent-label';\n    latent.innerText = `z: ${z}`;\n\n    div.appendChild(latent);\n    div.appendChild(canvas);\n\n    testingElement.appendChild(div);\n  }\n}"},"hash":"ad4e01110d513d8d7f6e742e5098f94e","cacheData":{"env":{}}}