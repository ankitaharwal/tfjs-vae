{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528206326997},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\fast-isnumeric\\package.json","includedInParent":true,"mtime":1446743376000}],"generated":{"js":"/**\n * inspired by is-number <https://github.com/jonschlinkert/is-number>\n * but significantly simplified and sped up by ignoring number and string constructors\n * ie these return false:\n *   new Number(1)\n *   new String('1')\n */\n\n'use strict';\n\n/**\n * Is this string all whitespace?\n * This solution kind of makes my brain hurt, but it's significantly faster\n * than !str.trim() or any other solution I could find.\n *\n * whitespace codes from: http://en.wikipedia.org/wiki/Whitespace_character\n * and verified with:\n *\n *  for(var i = 0; i < 65536; i++) {\n *      var s = String.fromCharCode(i);\n *      if(+s===0 && !s.trim()) console.log(i, s);\n *  }\n *\n * which counts a couple of these as *not* whitespace, but finds nothing else\n * that *is* whitespace. Note that charCodeAt stops at 16 bits, but it appears\n * that there are no whitespace characters above this, and code points above\n * this do not map onto white space characters.\n */\nfunction allBlankCharCodes(str){\n    var l = str.length,\n        a;\n    for(var i = 0; i < l; i++) {\n        a = str.charCodeAt(i);\n        if((a < 9 || a > 13) && (a !== 32) && (a !== 133) && (a !== 160) &&\n            (a !== 5760) && (a !== 6158) && (a < 8192 || a > 8205) &&\n            (a !== 8232) && (a !== 8233) && (a !== 8239) && (a !== 8287) &&\n            (a !== 8288) && (a !== 12288) && (a !== 65279)) {\n                return false;\n        }\n    }\n    return true;\n}\n\nmodule.exports = function(n) {\n    var type = typeof n;\n    if(type === 'string') {\n        var original = n;\n        n = +n;\n        // whitespace strings cast to zero - filter them out\n        if(n===0 && allBlankCharCodes(original)) return false;\n    }\n    else if(type !== 'number') return false;\n\n    return n - n < 1;\n};\n","map":{"mappings":[{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\fast-isnumeric\\index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}}],"sources":{"node_modules\\fast-isnumeric\\index.js":"/**\n * inspired by is-number <https://github.com/jonschlinkert/is-number>\n * but significantly simplified and sped up by ignoring number and string constructors\n * ie these return false:\n *   new Number(1)\n *   new String('1')\n */\n\n'use strict';\n\n/**\n * Is this string all whitespace?\n * This solution kind of makes my brain hurt, but it's significantly faster\n * than !str.trim() or any other solution I could find.\n *\n * whitespace codes from: http://en.wikipedia.org/wiki/Whitespace_character\n * and verified with:\n *\n *  for(var i = 0; i < 65536; i++) {\n *      var s = String.fromCharCode(i);\n *      if(+s===0 && !s.trim()) console.log(i, s);\n *  }\n *\n * which counts a couple of these as *not* whitespace, but finds nothing else\n * that *is* whitespace. Note that charCodeAt stops at 16 bits, but it appears\n * that there are no whitespace characters above this, and code points above\n * this do not map onto white space characters.\n */\nfunction allBlankCharCodes(str){\n    var l = str.length,\n        a;\n    for(var i = 0; i < l; i++) {\n        a = str.charCodeAt(i);\n        if((a < 9 || a > 13) && (a !== 32) && (a !== 133) && (a !== 160) &&\n            (a !== 5760) && (a !== 6158) && (a < 8192 || a > 8205) &&\n            (a !== 8232) && (a !== 8233) && (a !== 8239) && (a !== 8287) &&\n            (a !== 8288) && (a !== 12288) && (a !== 65279)) {\n                return false;\n        }\n    }\n    return true;\n}\n\nmodule.exports = function(n) {\n    var type = typeof n;\n    if(type === 'string') {\n        var original = n;\n        n = +n;\n        // whitespace strings cast to zero - filter them out\n        if(n===0 && allBlankCharCodes(original)) return false;\n    }\n    else if(type !== 'number') return false;\n\n    return n - n < 1;\n};\n"},"lineCount":56}},"hash":"650663ec33adcf01bac4ada7c51baaef","cacheData":{"env":{}}}