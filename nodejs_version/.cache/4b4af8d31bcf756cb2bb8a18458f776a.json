{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528206326997},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\split-polygon\\package.json","includedInParent":true,"mtime":1403191150000},{"name":"robust-dot-product","loc":{"line":3,"column":24}},{"name":"robust-sum","loc":{"line":4,"column":24}}],"generated":{"js":"\"use strict\"\n\nvar robustDot = require(\"robust-dot-product\")\nvar robustSum = require(\"robust-sum\")\n\nmodule.exports = splitPolygon\nmodule.exports.positive = positive\nmodule.exports.negative = negative\n\nfunction planeT(p, plane) {\n  var r = robustSum(robustDot(p, plane), [plane[plane.length-1]])\n  return r[r.length-1]\n}\n\n\n//Can't do this exactly and emit a floating point result\nfunction lerpW(a, wa, b, wb) {\n  var d = wb - wa\n  var t = -wa / d\n  if(t < 0.0) {\n    t = 0.0\n  } else if(t > 1.0) {\n    t = 1.0\n  }\n  var ti = 1.0 - t\n  var n = a.length\n  var r = new Array(n)\n  for(var i=0; i<n; ++i) {\n    r[i] = t * a[i] + ti * b[i]\n  }\n  return r\n}\n\nfunction splitPolygon(points, plane) {\n  var pos = []\n  var neg = []\n  var a = planeT(points[points.length-1], plane)\n  for(var s=points[points.length-1], t=points[0], i=0; i<points.length; ++i, s=t) {\n    t = points[i]\n    var b = planeT(t, plane)\n    if((a < 0 && b > 0) || (a > 0 && b < 0)) {\n      var p = lerpW(s, b, t, a)\n      pos.push(p)\n      neg.push(p.slice())\n    }\n    if(b < 0) {\n      neg.push(t.slice())\n    } else if(b > 0) {\n      pos.push(t.slice())\n    } else {\n      pos.push(t.slice())\n      neg.push(t.slice())\n    }\n    a = b\n  }\n  return { positive: pos, negative: neg }\n}\n\nfunction positive(points, plane) {\n  var pos = []\n  var a = planeT(points[points.length-1], plane)\n  for(var s=points[points.length-1], t=points[0], i=0; i<points.length; ++i, s=t) {\n    t = points[i]\n    var b = planeT(t, plane)\n    if((a < 0 && b > 0) || (a > 0 && b < 0)) {\n      pos.push(lerpW(s, b, t, a))\n    }\n    if(b >= 0) {\n      pos.push(t.slice())\n    }\n    a = b\n  }\n  return pos\n}\n\nfunction negative(points, plane) {\n  var neg = []\n  var a = planeT(points[points.length-1], plane)\n  for(var s=points[points.length-1], t=points[0], i=0; i<points.length; ++i, s=t) {\n    t = points[i]\n    var b = planeT(t, plane)\n    if((a < 0 && b > 0) || (a > 0 && b < 0)) {\n      neg.push(lerpW(s, b, t, a))\n    }\n    if(b <= 0) {\n      neg.push(t.slice())\n    }\n    a = b\n  }\n  return neg\n}","map":{"mappings":[{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\split-polygon\\clip-poly.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}}],"sources":{"node_modules\\split-polygon\\clip-poly.js":"\"use strict\"\n\nvar robustDot = require(\"robust-dot-product\")\nvar robustSum = require(\"robust-sum\")\n\nmodule.exports = splitPolygon\nmodule.exports.positive = positive\nmodule.exports.negative = negative\n\nfunction planeT(p, plane) {\n  var r = robustSum(robustDot(p, plane), [plane[plane.length-1]])\n  return r[r.length-1]\n}\n\n\n//Can't do this exactly and emit a floating point result\nfunction lerpW(a, wa, b, wb) {\n  var d = wb - wa\n  var t = -wa / d\n  if(t < 0.0) {\n    t = 0.0\n  } else if(t > 1.0) {\n    t = 1.0\n  }\n  var ti = 1.0 - t\n  var n = a.length\n  var r = new Array(n)\n  for(var i=0; i<n; ++i) {\n    r[i] = t * a[i] + ti * b[i]\n  }\n  return r\n}\n\nfunction splitPolygon(points, plane) {\n  var pos = []\n  var neg = []\n  var a = planeT(points[points.length-1], plane)\n  for(var s=points[points.length-1], t=points[0], i=0; i<points.length; ++i, s=t) {\n    t = points[i]\n    var b = planeT(t, plane)\n    if((a < 0 && b > 0) || (a > 0 && b < 0)) {\n      var p = lerpW(s, b, t, a)\n      pos.push(p)\n      neg.push(p.slice())\n    }\n    if(b < 0) {\n      neg.push(t.slice())\n    } else if(b > 0) {\n      pos.push(t.slice())\n    } else {\n      pos.push(t.slice())\n      neg.push(t.slice())\n    }\n    a = b\n  }\n  return { positive: pos, negative: neg }\n}\n\nfunction positive(points, plane) {\n  var pos = []\n  var a = planeT(points[points.length-1], plane)\n  for(var s=points[points.length-1], t=points[0], i=0; i<points.length; ++i, s=t) {\n    t = points[i]\n    var b = planeT(t, plane)\n    if((a < 0 && b > 0) || (a > 0 && b < 0)) {\n      pos.push(lerpW(s, b, t, a))\n    }\n    if(b >= 0) {\n      pos.push(t.slice())\n    }\n    a = b\n  }\n  return pos\n}\n\nfunction negative(points, plane) {\n  var neg = []\n  var a = planeT(points[points.length-1], plane)\n  for(var s=points[points.length-1], t=points[0], i=0; i<points.length; ++i, s=t) {\n    t = points[i]\n    var b = planeT(t, plane)\n    if((a < 0 && b > 0) || (a > 0 && b < 0)) {\n      neg.push(lerpW(s, b, t, a))\n    }\n    if(b <= 0) {\n      neg.push(t.slice())\n    }\n    a = b\n  }\n  return neg\n}"},"lineCount":91}},"hash":"a0c5c58baa39d6892d396e41fb4a2281","cacheData":{"env":{}}}