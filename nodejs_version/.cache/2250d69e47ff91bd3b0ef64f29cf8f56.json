{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528206326997},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\mat4-decompose\\package.json","includedInParent":true,"mtime":1423360399000},{"name":"./normalize","loc":{"line":18,"column":24}},{"name":"gl-mat4/create","loc":{"line":20,"column":21}},{"name":"gl-mat4/clone","loc":{"line":21,"column":20}},{"name":"gl-mat4/determinant","loc":{"line":22,"column":26}},{"name":"gl-mat4/invert","loc":{"line":23,"column":21}},{"name":"gl-mat4/transpose","loc":{"line":24,"column":24}},{"name":"gl-vec3/length","loc":{"line":26,"column":20}},{"name":"gl-vec3/normalize","loc":{"line":27,"column":23}},{"name":"gl-vec3/dot","loc":{"line":28,"column":17}},{"name":"gl-vec3/cross","loc":{"line":29,"column":19}}],"generated":{"js":"/*jshint unused:true*/\n/*\nInput:  matrix      ; a 4x4 matrix\nOutput: translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nReturns false if the matrix cannot be decomposed, true if it can\n\n\nReferences:\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n*/\n\nvar normalize = require('./normalize')\n\nvar create = require('gl-mat4/create')\nvar clone = require('gl-mat4/clone')\nvar determinant = require('gl-mat4/determinant')\nvar invert = require('gl-mat4/invert')\nvar transpose = require('gl-mat4/transpose')\nvar vec3 = {\n    length: require('gl-vec3/length'),\n    normalize: require('gl-vec3/normalize'),\n    dot: require('gl-vec3/dot'),\n    cross: require('gl-vec3/cross')\n}\n\nvar tmp = create()\nvar perspectiveMatrix = create()\nvar tmpVec4 = [0, 0, 0, 0]\nvar row = [ [0,0,0], [0,0,0], [0,0,0] ]\nvar pdum3 = [0,0,0]\n\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    if (!translation) translation = [0,0,0]\n    if (!scale) scale = [0,0,0]\n    if (!skew) skew = [0,0,0]\n    if (!perspective) perspective = [0,0,0,1]\n    if (!quaternion) quaternion = [0,0,0,1]\n\n    //normalize, if not possible then bail out early\n    if (!normalize(tmp, matrix))\n        return false\n\n    // perspectiveMatrix is used to solve for perspective, but it also provides\n    // an easy way to test for singularity of the upper 3x3 component.\n    clone(perspectiveMatrix, tmp)\n\n    perspectiveMatrix[3] = 0\n    perspectiveMatrix[7] = 0\n    perspectiveMatrix[11] = 0\n    perspectiveMatrix[15] = 1\n\n    // If the perspectiveMatrix is not invertible, we are also unable to\n    // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n    if (Math.abs(determinant(perspectiveMatrix) < 1e-8))\n        return false\n\n    var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11],\n            a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15]\n\n    // First, isolate perspective.\n    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n        tmpVec4[0] = a03\n        tmpVec4[1] = a13\n        tmpVec4[2] = a23\n        tmpVec4[3] = a33\n\n        // Solve the equation by inverting perspectiveMatrix and multiplying\n        // rightHandSide by the inverse.\n        // resuing the perspectiveMatrix here since it's no longer needed\n        var ret = invert(perspectiveMatrix, perspectiveMatrix)\n        if (!ret) return false\n        transpose(perspectiveMatrix, perspectiveMatrix)\n\n        //multiply by transposed inverse perspective matrix, into perspective vec4\n        vec4multMat4(perspective, tmpVec4, perspectiveMatrix)\n    } else { \n        //no perspective\n        perspective[0] = perspective[1] = perspective[2] = 0\n        perspective[3] = 1\n    }\n\n    // Next take care of translation\n    translation[0] = a30\n    translation[1] = a31\n    translation[2] = a32\n\n    // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n    mat3from4(row, tmp)\n\n    // Compute X scale factor and normalize first row.\n    scale[0] = vec3.length(row[0])\n    vec3.normalize(row[0], row[0])\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = vec3.dot(row[0], row[1])\n    combine(row[1], row[1], row[0], 1.0, -skew[0])\n\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = vec3.length(row[1])\n    vec3.normalize(row[1], row[1])\n    skew[0] /= scale[1]\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = vec3.dot(row[0], row[2])\n    combine(row[2], row[2], row[0], 1.0, -skew[1])\n    skew[2] = vec3.dot(row[1], row[2])\n    combine(row[2], row[2], row[1], 1.0, -skew[2])\n\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = vec3.length(row[2])\n    vec3.normalize(row[2], row[2])\n    skew[1] /= scale[2]\n    skew[2] /= scale[2]\n\n\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    vec3.cross(pdum3, row[1], row[2])\n    if (vec3.dot(row[0], pdum3) < 0) {\n        for (var i = 0; i < 3; i++) {\n            scale[i] *= -1;\n            row[i][0] *= -1\n            row[i][1] *= -1\n            row[i][2] *= -1\n        }\n    }\n\n    // Now, get the rotations out\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0))\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0))\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0))\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0))\n\n    if (row[2][1] > row[1][2])\n        quaternion[0] = -quaternion[0]\n    if (row[0][2] > row[2][0])\n        quaternion[1] = -quaternion[1]\n    if (row[1][0] > row[0][1])\n        quaternion[2] = -quaternion[2]\n    return true\n}\n\n//will be replaced by gl-vec4 eventually\nfunction vec4multMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n}\n\n//gets upper-left of a 4x4 matrix into a 3x3 of vectors\nfunction mat3from4(out, mat4x4) {\n    out[0][0] = mat4x4[0]\n    out[0][1] = mat4x4[1]\n    out[0][2] = mat4x4[2]\n    \n    out[1][0] = mat4x4[4]\n    out[1][1] = mat4x4[5]\n    out[1][2] = mat4x4[6]\n\n    out[2][0] = mat4x4[8]\n    out[2][1] = mat4x4[9]\n    out[2][2] = mat4x4[10]\n}\n\nfunction combine(out, a, b, scale1, scale2) {\n    out[0] = a[0] * scale1 + b[0] * scale2\n    out[1] = a[1] * scale1 + b[1] * scale2\n    out[2] = a[2] * scale1 + b[2] * scale2\n}","map":{"mappings":[{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules\\mat4-decompose\\index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}}],"sources":{"node_modules\\mat4-decompose\\index.js":"/*jshint unused:true*/\n/*\nInput:  matrix      ; a 4x4 matrix\nOutput: translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nReturns false if the matrix cannot be decomposed, true if it can\n\n\nReferences:\nhttps://github.com/kamicane/matrix3d/blob/master/lib/Matrix3d.js\nhttps://github.com/ChromiumWebApps/chromium/blob/master/ui/gfx/transform_util.cc\nhttp://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n*/\n\nvar normalize = require('./normalize')\n\nvar create = require('gl-mat4/create')\nvar clone = require('gl-mat4/clone')\nvar determinant = require('gl-mat4/determinant')\nvar invert = require('gl-mat4/invert')\nvar transpose = require('gl-mat4/transpose')\nvar vec3 = {\n    length: require('gl-vec3/length'),\n    normalize: require('gl-vec3/normalize'),\n    dot: require('gl-vec3/dot'),\n    cross: require('gl-vec3/cross')\n}\n\nvar tmp = create()\nvar perspectiveMatrix = create()\nvar tmpVec4 = [0, 0, 0, 0]\nvar row = [ [0,0,0], [0,0,0], [0,0,0] ]\nvar pdum3 = [0,0,0]\n\nmodule.exports = function decomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n    if (!translation) translation = [0,0,0]\n    if (!scale) scale = [0,0,0]\n    if (!skew) skew = [0,0,0]\n    if (!perspective) perspective = [0,0,0,1]\n    if (!quaternion) quaternion = [0,0,0,1]\n\n    //normalize, if not possible then bail out early\n    if (!normalize(tmp, matrix))\n        return false\n\n    // perspectiveMatrix is used to solve for perspective, but it also provides\n    // an easy way to test for singularity of the upper 3x3 component.\n    clone(perspectiveMatrix, tmp)\n\n    perspectiveMatrix[3] = 0\n    perspectiveMatrix[7] = 0\n    perspectiveMatrix[11] = 0\n    perspectiveMatrix[15] = 1\n\n    // If the perspectiveMatrix is not invertible, we are also unable to\n    // decompose, so we'll bail early. Constant taken from SkMatrix44::invert.\n    if (Math.abs(determinant(perspectiveMatrix) < 1e-8))\n        return false\n\n    var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11],\n            a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15]\n\n    // First, isolate perspective.\n    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {\n        tmpVec4[0] = a03\n        tmpVec4[1] = a13\n        tmpVec4[2] = a23\n        tmpVec4[3] = a33\n\n        // Solve the equation by inverting perspectiveMatrix and multiplying\n        // rightHandSide by the inverse.\n        // resuing the perspectiveMatrix here since it's no longer needed\n        var ret = invert(perspectiveMatrix, perspectiveMatrix)\n        if (!ret) return false\n        transpose(perspectiveMatrix, perspectiveMatrix)\n\n        //multiply by transposed inverse perspective matrix, into perspective vec4\n        vec4multMat4(perspective, tmpVec4, perspectiveMatrix)\n    } else { \n        //no perspective\n        perspective[0] = perspective[1] = perspective[2] = 0\n        perspective[3] = 1\n    }\n\n    // Next take care of translation\n    translation[0] = a30\n    translation[1] = a31\n    translation[2] = a32\n\n    // Now get scale and shear. 'row' is a 3 element array of 3 component vectors\n    mat3from4(row, tmp)\n\n    // Compute X scale factor and normalize first row.\n    scale[0] = vec3.length(row[0])\n    vec3.normalize(row[0], row[0])\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st.\n    skew[0] = vec3.dot(row[0], row[1])\n    combine(row[1], row[1], row[0], 1.0, -skew[0])\n\n    // Now, compute Y scale and normalize 2nd row.\n    scale[1] = vec3.length(row[1])\n    vec3.normalize(row[1], row[1])\n    skew[0] /= scale[1]\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    skew[1] = vec3.dot(row[0], row[2])\n    combine(row[2], row[2], row[0], 1.0, -skew[1])\n    skew[2] = vec3.dot(row[1], row[2])\n    combine(row[2], row[2], row[1], 1.0, -skew[2])\n\n    // Next, get Z scale and normalize 3rd row.\n    scale[2] = vec3.length(row[2])\n    vec3.normalize(row[2], row[2])\n    skew[1] /= scale[2]\n    skew[2] /= scale[2]\n\n\n    // At this point, the matrix (in rows) is orthonormal.\n    // Check for a coordinate system flip.  If the determinant\n    // is -1, then negate the matrix and the scaling factors.\n    vec3.cross(pdum3, row[1], row[2])\n    if (vec3.dot(row[0], pdum3) < 0) {\n        for (var i = 0; i < 3; i++) {\n            scale[i] *= -1;\n            row[i][0] *= -1\n            row[i][1] *= -1\n            row[i][2] *= -1\n        }\n    }\n\n    // Now, get the rotations out\n    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0))\n    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0))\n    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0))\n    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0))\n\n    if (row[2][1] > row[1][2])\n        quaternion[0] = -quaternion[0]\n    if (row[0][2] > row[2][0])\n        quaternion[1] = -quaternion[1]\n    if (row[1][0] > row[0][1])\n        quaternion[2] = -quaternion[2]\n    return true\n}\n\n//will be replaced by gl-vec4 eventually\nfunction vec4multMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n}\n\n//gets upper-left of a 4x4 matrix into a 3x3 of vectors\nfunction mat3from4(out, mat4x4) {\n    out[0][0] = mat4x4[0]\n    out[0][1] = mat4x4[1]\n    out[0][2] = mat4x4[2]\n    \n    out[1][0] = mat4x4[4]\n    out[1][1] = mat4x4[5]\n    out[1][2] = mat4x4[6]\n\n    out[2][0] = mat4x4[8]\n    out[2][1] = mat4x4[9]\n    out[2][2] = mat4x4[10]\n}\n\nfunction combine(out, a, b, scale1, scale2) {\n    out[0] = a[0] * scale1 + b[0] * scale2\n    out[1] = a[1] * scale1 + b[1] * scale2\n    out[2] = a[2] * scale1 + b[2] * scale2\n}"},"lineCount":179}},"hash":"92b02e878e9013588e68bfb02844fca2","cacheData":{"env":{}}}