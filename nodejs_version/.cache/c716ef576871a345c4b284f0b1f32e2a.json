{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528206326997},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\planar-graph-to-polyline\\package.json","includedInParent":true,"mtime":1426711182000},{"name":"edges-to-adjacency-list","loc":{"line":5,"column":18}}],"generated":{"js":"'use strict'\n\nmodule.exports = trimLeaves\n\nvar e2a = require('edges-to-adjacency-list')\n\nfunction trimLeaves(edges, positions) {\n  var adj = e2a(edges, positions.length)\n  var live = new Array(positions.length)\n  var nbhd = new Array(positions.length)\n\n  var dead = []\n  for(var i=0; i<positions.length; ++i) {\n    var count = adj[i].length\n    nbhd[i] = count\n    live[i] = true\n    if(count <= 1) {\n      dead.push(i)\n    }\n  }\n\n  while(dead.length > 0) {\n    var v = dead.pop()\n    live[v] = false\n    var n = adj[v]\n    for(var i=0; i<n.length; ++i) {\n      var u = n[i]\n      if(--nbhd[u] === 0) {\n        dead.push(u)\n      }\n    }\n  }\n\n  var newIndex = new Array(positions.length)\n  var npositions = []\n  for(var i=0; i<positions.length; ++i) {\n    if(live[i]) {\n      var v = npositions.length\n      newIndex[i] = v\n      npositions.push(positions[i])\n    } else {\n      newIndex[i] = -1\n    }\n  }\n\n  var nedges = []\n  for(var i=0; i<edges.length; ++i) {\n    var e = edges[i]\n    if(live[e[0]] && live[e[1]]) {\n      nedges.push([ newIndex[e[0]], newIndex[e[1]] ])\n    }\n  }\n  \n  return [ nedges, npositions ]\n}","map":{"mappings":[{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"node_modules\\planar-graph-to-polyline\\lib\\trim-leaves.js":"'use strict'\n\nmodule.exports = trimLeaves\n\nvar e2a = require('edges-to-adjacency-list')\n\nfunction trimLeaves(edges, positions) {\n  var adj = e2a(edges, positions.length)\n  var live = new Array(positions.length)\n  var nbhd = new Array(positions.length)\n\n  var dead = []\n  for(var i=0; i<positions.length; ++i) {\n    var count = adj[i].length\n    nbhd[i] = count\n    live[i] = true\n    if(count <= 1) {\n      dead.push(i)\n    }\n  }\n\n  while(dead.length > 0) {\n    var v = dead.pop()\n    live[v] = false\n    var n = adj[v]\n    for(var i=0; i<n.length; ++i) {\n      var u = n[i]\n      if(--nbhd[u] === 0) {\n        dead.push(u)\n      }\n    }\n  }\n\n  var newIndex = new Array(positions.length)\n  var npositions = []\n  for(var i=0; i<positions.length; ++i) {\n    if(live[i]) {\n      var v = npositions.length\n      newIndex[i] = v\n      npositions.push(positions[i])\n    } else {\n      newIndex[i] = -1\n    }\n  }\n\n  var nedges = []\n  for(var i=0; i<edges.length; ++i) {\n    var e = edges[i]\n    if(live[e[0]] && live[e[1]]) {\n      nedges.push([ newIndex[e[0]], newIndex[e[1]] ])\n    }\n  }\n  \n  return [ nedges, npositions ]\n}"},"lineCount":55}},"hash":"90acc7fc0f10034577206f3a315f5b06","cacheData":{"env":{}}}