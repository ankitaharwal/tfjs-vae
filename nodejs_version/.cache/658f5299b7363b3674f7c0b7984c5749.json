{"dependencies":[{"name":"C:\\Users\\qison\\package.json","includedInParent":true,"mtime":1526331035212},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\planar-graph-to-polyline\\package.json","includedInParent":true,"mtime":1426711182000},{"name":"edges-to-adjacency-list","loc":{"line":5,"column":18}},{"name":"planar-dual","loc":{"line":6,"column":25}},{"name":"point-in-big-polygon","loc":{"line":7,"column":32}},{"name":"two-product","loc":{"line":8,"column":25}},{"name":"robust-sum","loc":{"line":9,"column":24}},{"name":"uniq","loc":{"line":10,"column":19}},{"name":"./lib/trim-leaves","loc":{"line":11,"column":25}}],"generated":{"js":"'use strict'\n\nmodule.exports = planarGraphToPolyline\n\nvar e2a = require('edges-to-adjacency-list')\nvar planarDual = require('planar-dual')\nvar preprocessPolygon = require('point-in-big-polygon')\nvar twoProduct = require('two-product')\nvar robustSum = require('robust-sum')\nvar uniq = require('uniq')\nvar trimLeaves = require('./lib/trim-leaves')\n\nfunction makeArray(length, fill) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = fill\n  }\n  return result\n}\n\nfunction makeArrayOfArrays(length) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = []\n  }\n  return result\n}\n\n\nfunction planarGraphToPolyline(edges, positions) {\n\n  //Trim leaves\n  var result = trimLeaves(edges, positions)\n  edges = result[0]\n  positions = result[1]\n\n  var numVertices = positions.length\n  var numEdges = edges.length\n\n  //Calculate adjacency list, check manifold\n  var adj = e2a(edges, positions.length)\n  for(var i=0; i<numVertices; ++i) {\n    if(adj[i].length % 2 === 1) {\n      throw new Error('planar-graph-to-polyline: graph must be manifold')\n    }\n  }\n\n  //Get faces\n  var faces = planarDual(edges, positions)\n\n  //Check orientation of a polygon using exact arithmetic\n  function ccw(c) {\n    var n = c.length\n    var area = [0]\n    for(var j=0; j<n; ++j) {\n      var a = positions[c[j]]\n      var b = positions[c[(j+1)%n]]\n      var t00 = twoProduct(-a[0], a[1])\n      var t01 = twoProduct(-a[0], b[1])\n      var t10 = twoProduct( b[0], a[1])\n      var t11 = twoProduct( b[0], b[1])\n      area = robustSum(area, robustSum(robustSum(t00, t01), robustSum(t10, t11)))\n    }\n    return area[area.length-1] > 0\n  }\n\n  //Extract all clockwise faces\n  faces = faces.filter(ccw)\n\n  //Detect which loops are contained in one another to handle parent-of relation\n  var numFaces = faces.length\n  var parent = new Array(numFaces)\n  var containment = new Array(numFaces)\n  for(var i=0; i<numFaces; ++i) {\n    parent[i] = i\n    var row = new Array(numFaces)\n    var loopVertices = faces[i].map(function(v) {\n      return positions[v]\n    })\n    var pmc = preprocessPolygon([loopVertices])\n    var count = 0\n    outer:\n    for(var j=0; j<numFaces; ++j) {\n      row[j] = 0\n      if(i === j) {\n        continue\n      }\n      var c = faces[j]\n      var n = c.length\n      for(var k=0; k<n; ++k) {\n        var d = pmc(positions[c[k]])\n        if(d !== 0) {\n          if(d < 0) {\n            row[j] = 1\n            count += 1\n          }\n          continue outer\n        }\n      }\n      row[j] = 1\n      count += 1\n    }\n    containment[i] = [count, i, row]\n  }\n  containment.sort(function(a,b) {\n    return b[0] - a[0]\n  })\n  for(var i=0; i<numFaces; ++i) {\n    var row = containment[i]\n    var idx = row[1]\n    var children = row[2]\n    for(var j=0; j<numFaces; ++j) {\n      if(children[j]) {\n        parent[j] = idx\n      }\n    }\n  }\n\n  //Initialize face adjacency list\n  var fadj = makeArrayOfArrays(numFaces)\n  for(var i=0; i<numFaces; ++i) {\n    fadj[i].push(parent[i])\n    fadj[parent[i]].push(i)\n  }\n\n  //Build adjacency matrix for edges\n  var edgeAdjacency = {}\n  var internalVertices = makeArray(numVertices, false)\n  for(var i=0; i<numFaces; ++i) {\n    var c = faces[i]\n    var n = c.length\n    for(var j=0; j<n; ++j) {\n      var a = c[j]\n      var b = c[(j+1)%n]\n      var key = Math.min(a,b) + \":\" + Math.max(a,b)\n      if(key in edgeAdjacency) {\n        var neighbor = edgeAdjacency[key]\n        fadj[neighbor].push(i)\n        fadj[i].push(neighbor)\n        internalVertices[a] = internalVertices[b] = true\n      } else {\n        edgeAdjacency[key] = i\n      }\n    }\n  }\n\n  function sharedBoundary(c) {\n    var n = c.length\n    for(var i=0; i<n; ++i) {\n      if(!internalVertices[c[i]]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  var toVisit = []\n  var parity = makeArray(numFaces, -1)\n  for(var i=0; i<numFaces; ++i) {\n    if(parent[i] === i && !sharedBoundary(faces[i])) {\n      toVisit.push(i)\n      parity[i] = 0\n    } else {\n      parity[i] = -1\n    }\n  }\n\n  //Using face adjacency, classify faces as in/out\n  var result = []\n  while(toVisit.length > 0) {\n    var top = toVisit.pop()\n    var nbhd = fadj[top]\n    uniq(nbhd, function(a,b) {\n      return a-b\n    })\n    var nnbhr = nbhd.length\n    var p = parity[top]\n    var polyline\n    if(p === 0) {\n      var c = faces[top]\n      polyline = [c]\n    }\n    for(var i=0; i<nnbhr; ++i) {\n      var f = nbhd[i]\n      if(parity[f] >= 0) {\n        continue\n      }\n      parity[f] = p^1\n      toVisit.push(f)\n      if(p === 0) {\n        var c = faces[f]\n        if(!sharedBoundary(c)) {\n          c.reverse()\n          polyline.push(c)\n        }\n      }\n    }\n    if(p === 0) {\n      result.push(polyline)\n    }\n  }\n\n  return result\n}","map":{"mappings":[{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}}],"sources":{"nodejs_version\\node_modules\\planar-graph-to-polyline\\pg2pl.js":"'use strict'\n\nmodule.exports = planarGraphToPolyline\n\nvar e2a = require('edges-to-adjacency-list')\nvar planarDual = require('planar-dual')\nvar preprocessPolygon = require('point-in-big-polygon')\nvar twoProduct = require('two-product')\nvar robustSum = require('robust-sum')\nvar uniq = require('uniq')\nvar trimLeaves = require('./lib/trim-leaves')\n\nfunction makeArray(length, fill) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = fill\n  }\n  return result\n}\n\nfunction makeArrayOfArrays(length) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = []\n  }\n  return result\n}\n\n\nfunction planarGraphToPolyline(edges, positions) {\n\n  //Trim leaves\n  var result = trimLeaves(edges, positions)\n  edges = result[0]\n  positions = result[1]\n\n  var numVertices = positions.length\n  var numEdges = edges.length\n\n  //Calculate adjacency list, check manifold\n  var adj = e2a(edges, positions.length)\n  for(var i=0; i<numVertices; ++i) {\n    if(adj[i].length % 2 === 1) {\n      throw new Error('planar-graph-to-polyline: graph must be manifold')\n    }\n  }\n\n  //Get faces\n  var faces = planarDual(edges, positions)\n\n  //Check orientation of a polygon using exact arithmetic\n  function ccw(c) {\n    var n = c.length\n    var area = [0]\n    for(var j=0; j<n; ++j) {\n      var a = positions[c[j]]\n      var b = positions[c[(j+1)%n]]\n      var t00 = twoProduct(-a[0], a[1])\n      var t01 = twoProduct(-a[0], b[1])\n      var t10 = twoProduct( b[0], a[1])\n      var t11 = twoProduct( b[0], b[1])\n      area = robustSum(area, robustSum(robustSum(t00, t01), robustSum(t10, t11)))\n    }\n    return area[area.length-1] > 0\n  }\n\n  //Extract all clockwise faces\n  faces = faces.filter(ccw)\n\n  //Detect which loops are contained in one another to handle parent-of relation\n  var numFaces = faces.length\n  var parent = new Array(numFaces)\n  var containment = new Array(numFaces)\n  for(var i=0; i<numFaces; ++i) {\n    parent[i] = i\n    var row = new Array(numFaces)\n    var loopVertices = faces[i].map(function(v) {\n      return positions[v]\n    })\n    var pmc = preprocessPolygon([loopVertices])\n    var count = 0\n    outer:\n    for(var j=0; j<numFaces; ++j) {\n      row[j] = 0\n      if(i === j) {\n        continue\n      }\n      var c = faces[j]\n      var n = c.length\n      for(var k=0; k<n; ++k) {\n        var d = pmc(positions[c[k]])\n        if(d !== 0) {\n          if(d < 0) {\n            row[j] = 1\n            count += 1\n          }\n          continue outer\n        }\n      }\n      row[j] = 1\n      count += 1\n    }\n    containment[i] = [count, i, row]\n  }\n  containment.sort(function(a,b) {\n    return b[0] - a[0]\n  })\n  for(var i=0; i<numFaces; ++i) {\n    var row = containment[i]\n    var idx = row[1]\n    var children = row[2]\n    for(var j=0; j<numFaces; ++j) {\n      if(children[j]) {\n        parent[j] = idx\n      }\n    }\n  }\n\n  //Initialize face adjacency list\n  var fadj = makeArrayOfArrays(numFaces)\n  for(var i=0; i<numFaces; ++i) {\n    fadj[i].push(parent[i])\n    fadj[parent[i]].push(i)\n  }\n\n  //Build adjacency matrix for edges\n  var edgeAdjacency = {}\n  var internalVertices = makeArray(numVertices, false)\n  for(var i=0; i<numFaces; ++i) {\n    var c = faces[i]\n    var n = c.length\n    for(var j=0; j<n; ++j) {\n      var a = c[j]\n      var b = c[(j+1)%n]\n      var key = Math.min(a,b) + \":\" + Math.max(a,b)\n      if(key in edgeAdjacency) {\n        var neighbor = edgeAdjacency[key]\n        fadj[neighbor].push(i)\n        fadj[i].push(neighbor)\n        internalVertices[a] = internalVertices[b] = true\n      } else {\n        edgeAdjacency[key] = i\n      }\n    }\n  }\n\n  function sharedBoundary(c) {\n    var n = c.length\n    for(var i=0; i<n; ++i) {\n      if(!internalVertices[c[i]]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  var toVisit = []\n  var parity = makeArray(numFaces, -1)\n  for(var i=0; i<numFaces; ++i) {\n    if(parent[i] === i && !sharedBoundary(faces[i])) {\n      toVisit.push(i)\n      parity[i] = 0\n    } else {\n      parity[i] = -1\n    }\n  }\n\n  //Using face adjacency, classify faces as in/out\n  var result = []\n  while(toVisit.length > 0) {\n    var top = toVisit.pop()\n    var nbhd = fadj[top]\n    uniq(nbhd, function(a,b) {\n      return a-b\n    })\n    var nnbhr = nbhd.length\n    var p = parity[top]\n    var polyline\n    if(p === 0) {\n      var c = faces[top]\n      polyline = [c]\n    }\n    for(var i=0; i<nnbhr; ++i) {\n      var f = nbhd[i]\n      if(parity[f] >= 0) {\n        continue\n      }\n      parity[f] = p^1\n      toVisit.push(f)\n      if(p === 0) {\n        var c = faces[f]\n        if(!sharedBoundary(c)) {\n          c.reverse()\n          polyline.push(c)\n        }\n      }\n    }\n    if(p === 0) {\n      result.push(polyline)\n    }\n  }\n\n  return result\n}"},"lineCount":204}},"hash":"940f1222bec1a160844bdeb3f6c5a6e2","cacheData":{"env":{}}}