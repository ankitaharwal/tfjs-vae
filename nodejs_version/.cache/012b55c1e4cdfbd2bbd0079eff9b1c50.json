{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528206326997},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\gl-cone3d\\package.json","includedInParent":true,"mtime":499162500000},{"name":"gl-vec3","loc":{"line":3,"column":16}},{"name":"gl-vec4","loc":{"line":4,"column":17}},{"name":"./lib/conemesh","loc":{"line":267,"column":40}}],"generated":{"js":"\"use strict\";\n\nvar V = require('gl-vec3');\nvar V4 = require('gl-vec4');\n\nvar vec3 = function(x, y, z) {\n\tvar v = V.create();\n\tif (x !== undefined) {\n\t\tV.set(v, x, y, z);\n\t}\n\treturn v;\n}\n\nvar createPositionsForMeshgrid = function(meshgrid) {\n\tvar xs = meshgrid[0], ys = meshgrid[1], zs = meshgrid[2];\n\tvar positions = [];\n\tfor (var z=0; z<zs.length; z++) {\n\t\tfor (var y=0; y<ys.length; y++) {\n\t\t\tfor (var x=0; x<xs.length; x++) {\n\t\t\t\tpositions.push([zs[z], ys[y], xs[x]]);\n\t\t\t}\n\t\t}\n\t}\n\treturn positions;\n};\n\nvar findLastSmallerIndex = function(points, v) {\n\tfor (var i=0; i<points.length; i++) {\n\t\tif (points[i] >= v) {\n\t\t\treturn i-1;\n\t\t}\n\t}\n\treturn i;\n};\n\nvar tmp = V.create();\nvar tmp2 = V.create();\n\nvar clamp = function(v, min, max) {\n\treturn v < min ? min : (v > max ? max : v);\n};\n\nvar sampleMeshgrid = function(point, array, meshgrid, clampOverflow) {\n\tvar x = point[0];\n\tvar y = point[1];\n\tvar z = point[2];\n\n\tvar w = meshgrid[0].length;\n\tvar h = meshgrid[1].length;\n\tvar d = meshgrid[2].length;\n\n\t// Find the index of the nearest smaller value in the meshgrid for each coordinate of (x,y,z).\n\t// The nearest smaller value index for x is the index x0 such that\n\t// meshgrid[0][x0] < x and for all x1 > x0, meshgrid[0][x1] >= x.\n\tvar x0 = findLastSmallerIndex(meshgrid[0], x);\n\tvar y0 = findLastSmallerIndex(meshgrid[1], y);\n\tvar z0 = findLastSmallerIndex(meshgrid[2], z);\n\n\t// Get the nearest larger meshgrid value indices.\n\t// From the above \"nearest smaller value\", we know that\n\t//   meshgrid[0][x0] < x\n\t//   meshgrid[0][x0+1] >= x\n\tvar x1 = x0 + 1;\n\tvar y1 = y0 + 1;\n\tvar z1 = z0 + 1;\n\n\tif (clampOverflow) {\n\t\tx0 = clamp(x0, 0, w-1);\n\t\tx1 = clamp(x1, 0, w-1);\n\t\ty0 = clamp(y0, 0, h-1);\n\t\ty1 = clamp(y1, 0, h-1);\n\t\tz0 = clamp(z0, 0, d-1);\n\t\tz1 = clamp(z1, 0, d-1);\n\t}\n\n\t// Reject points outside the meshgrid, return a zero vector.\n\tif (x0 < 0 || y0 < 0 || z0 < 0 || x1 >= w || y1 >= h || z1 >= d) {\n\t\treturn V.create();\n\t}\n\n\t// Normalize point coordinates to 0..1 scaling factor between x0 and x1.\n\tvar xf = (x - meshgrid[0][x0]) / (meshgrid[0][x1] - meshgrid[0][x0]);\n\tvar yf = (y - meshgrid[1][y0]) / (meshgrid[1][y1] - meshgrid[1][y0]);\n\tvar zf = (z - meshgrid[2][z0]) / (meshgrid[2][z1] - meshgrid[2][z0]);\n\n\tif (xf < 0 || xf > 1 || isNaN(xf)) xf = 0;\n\tif (yf < 0 || yf > 1 || isNaN(yf)) yf = 0;\n\tif (zf < 0 || zf > 1 || isNaN(zf)) zf = 0;\n\n\tvar z0off = z0*w*h;\n\tvar z1off = z1*w*h;\n\n\tvar y0off = y0*w;\n\tvar y1off = y1*w;\n\n\tvar x0off = x0;\n\tvar x1off = x1;\n\n\t// Sample data array around the (x,y,z) point.\n\t//  vZYX = array[zZoff + yYoff + xXoff]\n\tvar v000 = array[y0off + z0off + x0off];\n\tvar v001 = array[y0off + z0off + x1off];\n\tvar v010 = array[y1off + z0off + x0off];\n\tvar v011 = array[y1off + z0off + x1off];\n\tvar v100 = array[y0off + z1off + x0off];\n\tvar v101 = array[y0off + z1off + x1off];\n\tvar v110 = array[y1off + z1off + x0off];\n\tvar v111 = array[y1off + z1off + x1off];\n\n\tvar result = V.create();\n\n\t// Average samples according to distance to point.\n\tV.lerp(result, v000, v001, xf);\n\tV.lerp(tmp, v010, v011, xf);\n\tV.lerp(result, result, tmp, yf);\n\tV.lerp(tmp, v100, v101, xf);\n\tV.lerp(tmp2, v110, v111, xf);\n\tV.lerp(tmp, tmp, tmp2, yf);\n\tV.lerp(result, result, tmp, zf);\n\n\treturn result;\n};\n\nvar getOrthogonalVector = function(dst, v) {\n\t// Return up-vector for only-z vector.\n\tif (v[0] === 0 && v[1] === 0) {\n\t\tV.set(dst, 0, 1, 0);\n\t} else {\n\t\t// Return ax + by + cz = 0, a point that lies on the plane that has v as a normal and that isn't (0,0,0).\n\t\t// From the above if-statement we have ||a|| > 0  U  ||b|| > 0.\n\t\t// Assign z = 0, x = -b, y = a:\n\t\t// a*-b + b*a + c*0 = -ba + ba + 0 = 0\n\t\tV.set(dst, -v[1], v[0], 0);\n\t}\n\treturn dst;\n};\n\nmodule.exports = function(vectorfield, bounds) {\n\tvar positions;\n\tif (vectorfield.positions) {\n\t\tpositions = vectorfield.positions;\n\t} else {\n\t\tpositions = createPositionsForMeshgrid(vectorfield.meshgrid);\n\t}\n\tvar meshgrid = vectorfield.meshgrid;\n\tvar vectors = vectorfield.vectors;\n\tvar geo = {\n\t\tpositions: [],\n\t\tvertexIntensity: [],\n\t\tvertexIntensityBounds: vectorfield.vertexIntensityBounds,\n\t\tvertexNormals: [],\n\t\tvectors: [],\n\t\tcells: [],\n\t\tconeOffset: vectorfield.coneOffset,\n\t\tcolormap: vectorfield.colormap\n\t};\n\n\tif (vectorfield.positions.length === 0) {\n\t\tif (bounds) {\n\t\t\tbounds[0] = [0,0,0];\n\t\t\tbounds[1] = [0,0,0];\n\t\t}\n\t\treturn geo;\n\t}\n\n\t// Compute bounding box for the dataset.\n\t// Compute maximum velocity for the dataset to use for scaling the cones.\n\tvar maxNorm = 0;\n\tvar minX = 1/0, maxX = -1/0;\n\tvar minY = 1/0, maxY = -1/0;\n\tvar minZ = 1/0, maxZ = -1/0;\n\tvar v2 = null;\n\tvar positionVectors = [];\n\tvar minSeparation = 1/0;\n\tfor (var i = 0; i < positions.length; i++) {\n\t\tvar v1 = positions[i];\n\t\tminX = Math.min(v1[0], minX);\n\t\tmaxX = Math.max(v1[0], maxX);\n\t\tminY = Math.min(v1[1], minY);\n\t\tmaxY = Math.max(v1[1], maxY);\n\t\tminZ = Math.min(v1[2], minZ);\n\t\tmaxZ = Math.max(v1[2], maxZ);\n\t\tvar u;\n\t\tif (meshgrid) {\n\t\t\tu = sampleMeshgrid(v1, vectors, meshgrid, true);\n\t\t} else {\n\t\t\tu = vectors[i];\n\t\t}\n\t\tif (V.length(u) > maxNorm) {\n\t\t\tmaxNorm = V.length(u);\n\t\t}\n\t\tif (v2) {\n\t\t\tvar separation = V.distance(v1, v2);\n\t\t\tif (separation < minSeparation) {\n\t\t\t\tminSeparation = separation;\n\t\t\t}\n\t\t}\n\t\tv2 = v1;\n\t\tpositionVectors.push(u);\n\t}\n\tvar minV = [minX, minY, minZ];\n\tvar maxV = [maxX, maxY, maxZ];\n\tif (bounds) {\n\t\tbounds[0] = minV;\n\t\tbounds[1] = maxV;\n\t}\n\tif (maxNorm === 0) {\n\t\tmaxNorm = 1;\n\t}\n\t// Inverted max norm would map vector with norm maxNorm to 1 coord space units in length\n\tvar invertedMaxNorm = 1 / maxNorm;\n\n\tif (!isFinite(minSeparation) || isNaN(minSeparation)) {\n\t\tminSeparation = 1.0;\n\t}\n\n\t// Inverted max norm multiplied scaled by smallest found vector position distance:\n\t// Maps a vector with norm maxNorm to minSeparation coord space units in length.\n\t// In practice, scales maxNorm vectors so that they are just long enough to reach the adjacent vector position.\n\tgeo.vectorScale = invertedMaxNorm * minSeparation;\n\n\tvar nml = vec3(0,1,0);\n\n\tvar coneScale = vectorfield.coneSize || 0.5;\n\n\tif (vectorfield.absoluteConeSize) {\n\t\tconeScale = vectorfield.absoluteConeSize * invertedMaxNorm;\n\t}\n\n\tgeo.coneScale = coneScale;\n\n\t// Build the cone model.\n\tfor (var i = 0, j = 0; i < positions.length; i++) {\n\t\tvar p = positions[i];\n\t\tvar x = p[0], y = p[1], z = p[2];\n\t\tvar d = positionVectors[i];\n\t\tvar intensity = V.length(d) * invertedMaxNorm;\n\t\tfor (var k = 0, l = 8; k < l; k++) {\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\n\t\t\tgeo.vertexIntensity.push(intensity, intensity, intensity);\n\t\t\tgeo.vertexIntensity.push(intensity, intensity, intensity);\n\n\t\t\tgeo.vertexNormals.push(nml, nml, nml);\n\t\t\tgeo.vertexNormals.push(nml, nml, nml);\n\n\t\t\tvar m = geo.positions.length;\n\t\t\tgeo.cells.push([m-6, m-5, m-4], [m-3, m-2, m-1]);\n\t\t}\n\t}\n\n\treturn geo;\n};\n\nmodule.exports.createConeMesh = require('./lib/conemesh');\n","map":{"mappings":[{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules\\gl-cone3d\\cone.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}}],"sources":{"node_modules\\gl-cone3d\\cone.js":"\"use strict\";\n\nvar V = require('gl-vec3');\nvar V4 = require('gl-vec4');\n\nvar vec3 = function(x, y, z) {\n\tvar v = V.create();\n\tif (x !== undefined) {\n\t\tV.set(v, x, y, z);\n\t}\n\treturn v;\n}\n\nvar createPositionsForMeshgrid = function(meshgrid) {\n\tvar xs = meshgrid[0], ys = meshgrid[1], zs = meshgrid[2];\n\tvar positions = [];\n\tfor (var z=0; z<zs.length; z++) {\n\t\tfor (var y=0; y<ys.length; y++) {\n\t\t\tfor (var x=0; x<xs.length; x++) {\n\t\t\t\tpositions.push([zs[z], ys[y], xs[x]]);\n\t\t\t}\n\t\t}\n\t}\n\treturn positions;\n};\n\nvar findLastSmallerIndex = function(points, v) {\n\tfor (var i=0; i<points.length; i++) {\n\t\tif (points[i] >= v) {\n\t\t\treturn i-1;\n\t\t}\n\t}\n\treturn i;\n};\n\nvar tmp = V.create();\nvar tmp2 = V.create();\n\nvar clamp = function(v, min, max) {\n\treturn v < min ? min : (v > max ? max : v);\n};\n\nvar sampleMeshgrid = function(point, array, meshgrid, clampOverflow) {\n\tvar x = point[0];\n\tvar y = point[1];\n\tvar z = point[2];\n\n\tvar w = meshgrid[0].length;\n\tvar h = meshgrid[1].length;\n\tvar d = meshgrid[2].length;\n\n\t// Find the index of the nearest smaller value in the meshgrid for each coordinate of (x,y,z).\n\t// The nearest smaller value index for x is the index x0 such that\n\t// meshgrid[0][x0] < x and for all x1 > x0, meshgrid[0][x1] >= x.\n\tvar x0 = findLastSmallerIndex(meshgrid[0], x);\n\tvar y0 = findLastSmallerIndex(meshgrid[1], y);\n\tvar z0 = findLastSmallerIndex(meshgrid[2], z);\n\n\t// Get the nearest larger meshgrid value indices.\n\t// From the above \"nearest smaller value\", we know that\n\t//   meshgrid[0][x0] < x\n\t//   meshgrid[0][x0+1] >= x\n\tvar x1 = x0 + 1;\n\tvar y1 = y0 + 1;\n\tvar z1 = z0 + 1;\n\n\tif (clampOverflow) {\n\t\tx0 = clamp(x0, 0, w-1);\n\t\tx1 = clamp(x1, 0, w-1);\n\t\ty0 = clamp(y0, 0, h-1);\n\t\ty1 = clamp(y1, 0, h-1);\n\t\tz0 = clamp(z0, 0, d-1);\n\t\tz1 = clamp(z1, 0, d-1);\n\t}\n\n\t// Reject points outside the meshgrid, return a zero vector.\n\tif (x0 < 0 || y0 < 0 || z0 < 0 || x1 >= w || y1 >= h || z1 >= d) {\n\t\treturn V.create();\n\t}\n\n\t// Normalize point coordinates to 0..1 scaling factor between x0 and x1.\n\tvar xf = (x - meshgrid[0][x0]) / (meshgrid[0][x1] - meshgrid[0][x0]);\n\tvar yf = (y - meshgrid[1][y0]) / (meshgrid[1][y1] - meshgrid[1][y0]);\n\tvar zf = (z - meshgrid[2][z0]) / (meshgrid[2][z1] - meshgrid[2][z0]);\n\n\tif (xf < 0 || xf > 1 || isNaN(xf)) xf = 0;\n\tif (yf < 0 || yf > 1 || isNaN(yf)) yf = 0;\n\tif (zf < 0 || zf > 1 || isNaN(zf)) zf = 0;\n\n\tvar z0off = z0*w*h;\n\tvar z1off = z1*w*h;\n\n\tvar y0off = y0*w;\n\tvar y1off = y1*w;\n\n\tvar x0off = x0;\n\tvar x1off = x1;\n\n\t// Sample data array around the (x,y,z) point.\n\t//  vZYX = array[zZoff + yYoff + xXoff]\n\tvar v000 = array[y0off + z0off + x0off];\n\tvar v001 = array[y0off + z0off + x1off];\n\tvar v010 = array[y1off + z0off + x0off];\n\tvar v011 = array[y1off + z0off + x1off];\n\tvar v100 = array[y0off + z1off + x0off];\n\tvar v101 = array[y0off + z1off + x1off];\n\tvar v110 = array[y1off + z1off + x0off];\n\tvar v111 = array[y1off + z1off + x1off];\n\n\tvar result = V.create();\n\n\t// Average samples according to distance to point.\n\tV.lerp(result, v000, v001, xf);\n\tV.lerp(tmp, v010, v011, xf);\n\tV.lerp(result, result, tmp, yf);\n\tV.lerp(tmp, v100, v101, xf);\n\tV.lerp(tmp2, v110, v111, xf);\n\tV.lerp(tmp, tmp, tmp2, yf);\n\tV.lerp(result, result, tmp, zf);\n\n\treturn result;\n};\n\nvar getOrthogonalVector = function(dst, v) {\n\t// Return up-vector for only-z vector.\n\tif (v[0] === 0 && v[1] === 0) {\n\t\tV.set(dst, 0, 1, 0);\n\t} else {\n\t\t// Return ax + by + cz = 0, a point that lies on the plane that has v as a normal and that isn't (0,0,0).\n\t\t// From the above if-statement we have ||a|| > 0  U  ||b|| > 0.\n\t\t// Assign z = 0, x = -b, y = a:\n\t\t// a*-b + b*a + c*0 = -ba + ba + 0 = 0\n\t\tV.set(dst, -v[1], v[0], 0);\n\t}\n\treturn dst;\n};\n\nmodule.exports = function(vectorfield, bounds) {\n\tvar positions;\n\tif (vectorfield.positions) {\n\t\tpositions = vectorfield.positions;\n\t} else {\n\t\tpositions = createPositionsForMeshgrid(vectorfield.meshgrid);\n\t}\n\tvar meshgrid = vectorfield.meshgrid;\n\tvar vectors = vectorfield.vectors;\n\tvar geo = {\n\t\tpositions: [],\n\t\tvertexIntensity: [],\n\t\tvertexIntensityBounds: vectorfield.vertexIntensityBounds,\n\t\tvertexNormals: [],\n\t\tvectors: [],\n\t\tcells: [],\n\t\tconeOffset: vectorfield.coneOffset,\n\t\tcolormap: vectorfield.colormap\n\t};\n\n\tif (vectorfield.positions.length === 0) {\n\t\tif (bounds) {\n\t\t\tbounds[0] = [0,0,0];\n\t\t\tbounds[1] = [0,0,0];\n\t\t}\n\t\treturn geo;\n\t}\n\n\t// Compute bounding box for the dataset.\n\t// Compute maximum velocity for the dataset to use for scaling the cones.\n\tvar maxNorm = 0;\n\tvar minX = 1/0, maxX = -1/0;\n\tvar minY = 1/0, maxY = -1/0;\n\tvar minZ = 1/0, maxZ = -1/0;\n\tvar v2 = null;\n\tvar positionVectors = [];\n\tvar minSeparation = 1/0;\n\tfor (var i = 0; i < positions.length; i++) {\n\t\tvar v1 = positions[i];\n\t\tminX = Math.min(v1[0], minX);\n\t\tmaxX = Math.max(v1[0], maxX);\n\t\tminY = Math.min(v1[1], minY);\n\t\tmaxY = Math.max(v1[1], maxY);\n\t\tminZ = Math.min(v1[2], minZ);\n\t\tmaxZ = Math.max(v1[2], maxZ);\n\t\tvar u;\n\t\tif (meshgrid) {\n\t\t\tu = sampleMeshgrid(v1, vectors, meshgrid, true);\n\t\t} else {\n\t\t\tu = vectors[i];\n\t\t}\n\t\tif (V.length(u) > maxNorm) {\n\t\t\tmaxNorm = V.length(u);\n\t\t}\n\t\tif (v2) {\n\t\t\tvar separation = V.distance(v1, v2);\n\t\t\tif (separation < minSeparation) {\n\t\t\t\tminSeparation = separation;\n\t\t\t}\n\t\t}\n\t\tv2 = v1;\n\t\tpositionVectors.push(u);\n\t}\n\tvar minV = [minX, minY, minZ];\n\tvar maxV = [maxX, maxY, maxZ];\n\tif (bounds) {\n\t\tbounds[0] = minV;\n\t\tbounds[1] = maxV;\n\t}\n\tif (maxNorm === 0) {\n\t\tmaxNorm = 1;\n\t}\n\t// Inverted max norm would map vector with norm maxNorm to 1 coord space units in length\n\tvar invertedMaxNorm = 1 / maxNorm;\n\n\tif (!isFinite(minSeparation) || isNaN(minSeparation)) {\n\t\tminSeparation = 1.0;\n\t}\n\n\t// Inverted max norm multiplied scaled by smallest found vector position distance:\n\t// Maps a vector with norm maxNorm to minSeparation coord space units in length.\n\t// In practice, scales maxNorm vectors so that they are just long enough to reach the adjacent vector position.\n\tgeo.vectorScale = invertedMaxNorm * minSeparation;\n\n\tvar nml = vec3(0,1,0);\n\n\tvar coneScale = vectorfield.coneSize || 0.5;\n\n\tif (vectorfield.absoluteConeSize) {\n\t\tconeScale = vectorfield.absoluteConeSize * invertedMaxNorm;\n\t}\n\n\tgeo.coneScale = coneScale;\n\n\t// Build the cone model.\n\tfor (var i = 0, j = 0; i < positions.length; i++) {\n\t\tvar p = positions[i];\n\t\tvar x = p[0], y = p[1], z = p[2];\n\t\tvar d = positionVectors[i];\n\t\tvar intensity = V.length(d) * invertedMaxNorm;\n\t\tfor (var k = 0, l = 8; k < l; k++) {\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\t\t\tgeo.positions.push([x, y, z, j++]);\n\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\t\t\tgeo.vectors.push(d);\n\n\t\t\tgeo.vertexIntensity.push(intensity, intensity, intensity);\n\t\t\tgeo.vertexIntensity.push(intensity, intensity, intensity);\n\n\t\t\tgeo.vertexNormals.push(nml, nml, nml);\n\t\t\tgeo.vertexNormals.push(nml, nml, nml);\n\n\t\t\tvar m = geo.positions.length;\n\t\t\tgeo.cells.push([m-6, m-5, m-4], [m-3, m-2, m-1]);\n\t\t}\n\t}\n\n\treturn geo;\n};\n\nmodule.exports.createConeMesh = require('./lib/conemesh');\n"},"lineCount":268}},"hash":"a3be625bd53e7ff2364241a253a400a0","cacheData":{"env":{}}}