{"dependencies":[{"name":"C:\\Users\\qison\\package.json","includedInParent":true,"mtime":1526331035212},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\permutation-parity\\package.json","includedInParent":true,"mtime":1398898442000},{"name":"typedarray-pool","loc":{"line":7,"column":19}}],"generated":{"js":"\"use strict\"\n\nmodule.exports = permutationSign\n\nvar BRUTE_FORCE_CUTOFF = 32\n\nvar pool = require(\"typedarray-pool\")\n\nfunction permutationSign(p) {\n  var n = p.length\n  if(n < BRUTE_FORCE_CUTOFF) {\n    //Use quadratic algorithm for small n\n    var sgn = 1\n    for(var i=0; i<n; ++i) {\n      for(var j=0; j<i; ++j) {\n        if(p[i] < p[j]) {\n          sgn = -sgn\n        } else if(p[i] === p[j]) {\n          return 0\n        }\n      }\n    }\n    return sgn\n  } else {\n    //Otherwise use linear time algorithm\n    var visited = pool.mallocUint8(n)\n    for(var i=0; i<n; ++i) {\n      visited[i] = 0\n    }\n    var sgn = 1\n    for(var i=0; i<n; ++i) {\n      if(!visited[i]) {\n        var count = 1\n        visited[i] = 1\n        for(var j=p[i]; j!==i; j=p[j]) {\n          if(visited[j]) {\n            pool.freeUint8(visited)\n            return 0\n          }\n          count += 1\n          visited[j] = 1\n        }\n        if(!(count & 1)) {\n          sgn = -sgn\n        }\n      }\n    }\n    pool.freeUint8(visited)\n    return sgn\n  }\n}","map":{"mappings":[{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"nodejs_version\\node_modules\\permutation-parity\\permutation-sign.js":"\"use strict\"\n\nmodule.exports = permutationSign\n\nvar BRUTE_FORCE_CUTOFF = 32\n\nvar pool = require(\"typedarray-pool\")\n\nfunction permutationSign(p) {\n  var n = p.length\n  if(n < BRUTE_FORCE_CUTOFF) {\n    //Use quadratic algorithm for small n\n    var sgn = 1\n    for(var i=0; i<n; ++i) {\n      for(var j=0; j<i; ++j) {\n        if(p[i] < p[j]) {\n          sgn = -sgn\n        } else if(p[i] === p[j]) {\n          return 0\n        }\n      }\n    }\n    return sgn\n  } else {\n    //Otherwise use linear time algorithm\n    var visited = pool.mallocUint8(n)\n    for(var i=0; i<n; ++i) {\n      visited[i] = 0\n    }\n    var sgn = 1\n    for(var i=0; i<n; ++i) {\n      if(!visited[i]) {\n        var count = 1\n        visited[i] = 1\n        for(var j=p[i]; j!==i; j=p[j]) {\n          if(visited[j]) {\n            pool.freeUint8(visited)\n            return 0\n          }\n          count += 1\n          visited[j] = 1\n        }\n        if(!(count & 1)) {\n          sgn = -sgn\n        }\n      }\n    }\n    pool.freeUint8(visited)\n    return sgn\n  }\n}"},"lineCount":51}},"hash":"d3d2d0f6c1d9fd7b2275ac54fad06e3f","cacheData":{"env":{}}}