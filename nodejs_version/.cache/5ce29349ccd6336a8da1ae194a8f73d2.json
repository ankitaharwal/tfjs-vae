{"dependencies":[{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\package.json","includedInParent":true,"mtime":1528200878026},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\.babelrc","includedInParent":true,"mtime":1528197961732},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1524501157000},{"name":"../errors","loc":{"line":3,"column":23}},{"name":"./generic_utils","loc":{"line":4,"column":30}},{"name":"./math_utils","loc":{"line":5,"column":27}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = require(\"../errors\");\nvar generic_utils_1 = require(\"./generic_utils\");\nvar math_utils_1 = require(\"./math_utils\");\nfunction normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return generic_utils_1.pyListRepeat(value, n);\n    }\n    else {\n        if (value.length !== n) {\n            throw new errors_1.ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" +\n                (value.length + \" elements.\"));\n        }\n        for (var i = 0; i < n; ++i) {\n            var singleValue = value[i];\n            if (!math_utils_1.isInteger(singleValue)) {\n                throw new errors_1.ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" +\n                    (JSON.stringify(value) + \" including a non-integer number \") +\n                    (\"\" + singleValue));\n            }\n        }\n        return value;\n    }\n}\nexports.normalizeArray = normalizeArray;\nfunction convOutputLength(inputLength, fliterSize, padding, stride, dilation) {\n    if (dilation === void 0) { dilation = 1; }\n    if (inputLength == null) {\n        return inputLength;\n    }\n    var dilatedFilterSize = fliterSize + (fliterSize - 1) * (dilation - 1);\n    var outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    }\n    else {\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexports.convOutputLength = convOutputLength;\nfunction deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + math_utils_1.max([kernelSize - strideSize, 0]);\n    }\n    else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    }\n    else {\n        throw new errors_1.ValueError(\"Unsupport padding mode: \" + padding + \".\");\n    }\n    return dimSize;\n}\nexports.deconvLength = deconvLength;\n"},"hash":"f5c1ee3bff006513062774cb64e52d01","cacheData":{"env":{}}}