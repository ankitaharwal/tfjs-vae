{"dependencies":[{"name":"C:\\Users\\qison\\package.json","includedInParent":true,"mtime":1526331035212},{"name":"C:\\Users\\qison\\Google Drive\\tfjs_vae\\nodejs_version\\node_modules\\glslify\\package.json","includedInParent":true,"mtime":1519232140000},{"name":"falafel","loc":{"line":1,"column":22}},{"name":"duplexify","loc":{"line":2,"column":24}},{"name":"through2","loc":{"line":3,"column":22}},{"name":"concat-stream","loc":{"line":4,"column":21}},{"name":"from2","loc":{"line":5,"column":19}},{"name":"glslify-deps","loc":{"line":6,"column":20}},{"name":"glslify-bundle","loc":{"line":7,"column":22}},{"name":"path","loc":{"line":8,"column":19}},{"name":"static-eval","loc":{"line":9,"column":20}},{"name":"resolve","loc":{"line":10,"column":22}},{"name":"glsl-resolve","loc":{"line":11,"column":23}},{"name":"xtend","loc":{"line":12,"column":21}}],"generated":{"js":"var __dirname = \"C:\\\\Users\\\\qison\\\\Google Drive\\\\tfjs_vae\\\\nodejs_version\\\\node_modules\\\\glslify\";\nvar falafel = require('falafel')\nvar duplexify = require('duplexify')\nvar through = require('through2')\nvar concat = require('concat-stream')\nvar from = require('from2')\nvar gdeps = require('glslify-deps')\nvar gbundle = require('glslify-bundle')\nvar path = require('path')\nvar seval = require('static-eval')\nvar resolve = require('resolve')\nvar gresolve = require('glsl-resolve')\nvar extend = require('xtend')\n\nvar glslfile0 = path.join(__dirname,'index.js')\nvar glslfile1 = path.join(__dirname,'index')\nvar parseOptions = {\n  ecmaVersion: 6,\n  sourceType: 'module',\n  allowReturnOutsideFunction: true,\n  allowImportExportEverywhere: true,\n  allowHashBang: true\n}\n\nmodule.exports = function (file, opts) {\n  if (path.extname(file) == '.json') return through()\n  if (!opts) opts = {}\n  var posts = []\n  var dir = path.dirname(file)\n  var glvar = null, mdir = dir\n  var evars = {\n    __dirname: dir,\n    __filename: file,\n    require: { resolve: resolve }\n  }\n  function evaluate (expr) {\n    return seval(expr, evars)\n  }\n\n  var d = duplexify()\n  var out = from(function () {})\n  d.setReadable(out)\n  d.setWritable(concat({ encoding: 'string' }, function (src) {\n    var pending = 1\n    if (src.indexOf('glslify') === -1) {\n      out.push(src)\n      out.push(null)\n      return\n    }\n\n    try { var fout = falafel(src, parseOptions, onnode) }\n    catch (err) { return d.emit('error', err) }\n    done()\n    function onnode (node) {\n      if (node.type === 'Identifier' && node.name === 'require'\n      && node.parent.type === 'CallExpression'\n      && node.parent.arguments[0]\n      && node.parent.arguments[0].type === 'Literal'\n      && node.parent.arguments[0].value === 'path'\n      && node.parent.parent.type === 'VariableDeclarator') {\n        evars.path = path\n      } else if (node.type === 'Identifier' && node.name === 'require'\n      && node.parent.type === 'CallExpression'\n      && node.parent.arguments[0]\n      && node.parent.arguments[0].type === 'Literal'\n      && (/^glslify(?:\\/index(?:\\.js)?)?/.test(node.parent.arguments[0].value)\n      || path.resolve(dir,node.parent.arguments[0].value) === __dirname\n      || path.resolve(dir,node.parent.arguments[0].value) === glslfile0\n      || path.resolve(dir,node.parent.arguments[0].value) === glslfile1)) {\n        var p = node.parent.parent, pp = p.parent\n        if (p.type === 'CallExpression' && pp.type === 'CallExpression') {\n          // case: require('glslify')(...)\n          pending++\n          callexpr(p, done)\n        } else if (p.type === 'VariableDeclarator') {\n          // case: var glvar = require('glslify')\n          glvar = p.id.name\n        } else if (p.type === 'MemberExpression' && p.property.name === 'file'\n        && pp.type === 'CallExpression') {\n          // case: require('glslify').file(...)\n          pending++\n          rcallfile(pp, done)\n        } else if (p.type === 'MemberExpression' && p.property.name === 'compile'\n        && pp.type === 'CallExpression') {\n          // case: require('glslify').compile(...)\n          pending++\n          rcallcompile(pp, done)\n        } else if (p.type === 'TaggedTemplateExpression') {\n          // case: require('glslify')`...`\n          pending++\n          tagexpr(p, done)\n        }\n      } else if (node.type === 'Identifier' && node.name === glvar\n      && node.parent.type === 'CallExpression') {\n        // case: glvar(...)\n        pending++\n        callexpr(node.parent, done)\n      } else if (node.type === 'TaggedTemplateExpression'\n      && node.tag.name === glvar) {\n        // case: glvar`...`\n        pending++\n        tagexpr(node, done)\n      } else if (node.type === 'Identifier' && node.name === glvar\n      && node.parent.type === 'MemberExpression'\n      && node.parent.property.name === 'file'\n      && node.parent.parent.type === 'CallExpression'\n      && node.parent.parent.arguments[0]) {\n        pending++\n        callfile(node.parent.parent, done)\n      } else if (node.type === 'Identifier' && node.name === glvar\n      && node.parent.type === 'MemberExpression'\n      && node.parent.property.name === 'compile'\n      && node.parent.parent.type === 'CallExpression'\n      && node.parent.parent.arguments[0]) {\n        pending++\n        callcompile(node.parent.parent, done)\n      }\n    }\n    function tagexpr (node, cb) {\n      var q = node.quasi\n      var shadersrc = q.quasis.map(function (s) {\n        return s.value.raw + '__GLX_PLACEHOLDER__'\n      }).join('')\n      var d = createDeps({ cwd: mdir })\n      d.inline(shadersrc, mdir, function (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        node.update(node.tag.source() + '('\n          + JSON.stringify(bsrc.split('__GLX_PLACEHOLDER__'))\n          + [''].concat(q.expressions.map(function (e) {\n            return e.source()\n          })).join(',')\n          + ')')\n        cb()\n      })\n    }\n    function callexpr (p, cb) {\n      var marg = evaluate(p.arguments[0])\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps(extend({ cwd: mdir }, mopts))\n      if (/\\n/.test(marg)) { // source string\n        d.inline(marg, mdir, ondeps)\n      } else gresolve(marg, { basedir: mdir }, function (err, res) {\n        if (err) d.emit('error', err)\n        else d.add(res, ondeps)\n      })\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(p.callee.source()+'(['+JSON.stringify(bsrc)+'])')\n        cb()\n      }\n    }\n    function callcompile (p, cb) {\n      var mfile = p.arguments[0].value\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      d.inline(mfile, mdir, ondeps)\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(glvar + '([' + JSON.stringify(bsrc) + '])')\n        cb()\n      }\n    }\n    function callfile (p, cb) {\n      var mfile = p.arguments[0].value\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      gresolve(mfile, { basedir: mdir }, function (err, res) {\n        if (err) return d.emit('error', err)\n        d.add(res, ondeps)\n      })\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(glvar + '([' + JSON.stringify(bsrc) + '])')\n        cb()\n      }\n    }\n    function rcallfile (p, cb) {\n      var mfile = evaluate(p.arguments[0])\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      gresolve(mfile, { basedir: mdir }, function (err, res) {\n        if (err) return d.emit('error', err)\n        d.add(res, ondeps)\n      })\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(p.callee.object.source()+'(['+JSON.stringify(bsrc)+'])')\n        cb()\n      }\n    }\n    function rcallcompile (p, cb) {\n      var marg = evaluate(p.arguments[0])\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      d.inline(marg, mdir, ondeps)\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(p.callee.object.source()+'(['+JSON.stringify(bsrc)+'])')\n        cb()\n      }\n    }\n    function done () {\n      if (--pending === 0) {\n        out.push(fout.toString())\n        out.push(null)\n      }\n    }\n  }))\n  return d\n\n  function createDeps (opts) {\n    var depper = gdeps(opts)\n    depper.on('error', function (err) { d.emit('error', err) })\n    depper.on('file', function (file) { d.emit('file', file) })\n    var transforms = opts.transform || []\n    transforms = Array.isArray(transforms) ? transforms : [transforms]\n    transforms.forEach(function(transform) {\n      transform = Array.isArray(transform) ? transform : [transform]\n      var name = transform[0]\n      var opts = transform[1] || {}\n      if (opts.post) {\n        posts.push({ name: name, opts: opts })\n      } else {\n        depper.transform(name, opts)\n      }\n    })\n    return depper\n  }\n  function bundle (deps) {\n    var source = gbundle(deps)\n    posts.forEach(function (tr) {\n      var target = nodeResolve.sync(tr.name, {\n        basedir: base\n      })\n      var transform = require(target)\n      var src = transform(null, source, { post: true })\n      if (src) source = src\n    })\n    return source\n  }\n}\n","map":{"mappings":[{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"nodejs_version\\node_modules\\glslify\\transform.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}}],"sources":{"nodejs_version\\node_modules\\glslify\\transform.js":"var falafel = require('falafel')\nvar duplexify = require('duplexify')\nvar through = require('through2')\nvar concat = require('concat-stream')\nvar from = require('from2')\nvar gdeps = require('glslify-deps')\nvar gbundle = require('glslify-bundle')\nvar path = require('path')\nvar seval = require('static-eval')\nvar resolve = require('resolve')\nvar gresolve = require('glsl-resolve')\nvar extend = require('xtend')\n\nvar glslfile0 = path.join(__dirname,'index.js')\nvar glslfile1 = path.join(__dirname,'index')\nvar parseOptions = {\n  ecmaVersion: 6,\n  sourceType: 'module',\n  allowReturnOutsideFunction: true,\n  allowImportExportEverywhere: true,\n  allowHashBang: true\n}\n\nmodule.exports = function (file, opts) {\n  if (path.extname(file) == '.json') return through()\n  if (!opts) opts = {}\n  var posts = []\n  var dir = path.dirname(file)\n  var glvar = null, mdir = dir\n  var evars = {\n    __dirname: dir,\n    __filename: file,\n    require: { resolve: resolve }\n  }\n  function evaluate (expr) {\n    return seval(expr, evars)\n  }\n\n  var d = duplexify()\n  var out = from(function () {})\n  d.setReadable(out)\n  d.setWritable(concat({ encoding: 'string' }, function (src) {\n    var pending = 1\n    if (src.indexOf('glslify') === -1) {\n      out.push(src)\n      out.push(null)\n      return\n    }\n\n    try { var fout = falafel(src, parseOptions, onnode) }\n    catch (err) { return d.emit('error', err) }\n    done()\n    function onnode (node) {\n      if (node.type === 'Identifier' && node.name === 'require'\n      && node.parent.type === 'CallExpression'\n      && node.parent.arguments[0]\n      && node.parent.arguments[0].type === 'Literal'\n      && node.parent.arguments[0].value === 'path'\n      && node.parent.parent.type === 'VariableDeclarator') {\n        evars.path = path\n      } else if (node.type === 'Identifier' && node.name === 'require'\n      && node.parent.type === 'CallExpression'\n      && node.parent.arguments[0]\n      && node.parent.arguments[0].type === 'Literal'\n      && (/^glslify(?:\\/index(?:\\.js)?)?/.test(node.parent.arguments[0].value)\n      || path.resolve(dir,node.parent.arguments[0].value) === __dirname\n      || path.resolve(dir,node.parent.arguments[0].value) === glslfile0\n      || path.resolve(dir,node.parent.arguments[0].value) === glslfile1)) {\n        var p = node.parent.parent, pp = p.parent\n        if (p.type === 'CallExpression' && pp.type === 'CallExpression') {\n          // case: require('glslify')(...)\n          pending++\n          callexpr(p, done)\n        } else if (p.type === 'VariableDeclarator') {\n          // case: var glvar = require('glslify')\n          glvar = p.id.name\n        } else if (p.type === 'MemberExpression' && p.property.name === 'file'\n        && pp.type === 'CallExpression') {\n          // case: require('glslify').file(...)\n          pending++\n          rcallfile(pp, done)\n        } else if (p.type === 'MemberExpression' && p.property.name === 'compile'\n        && pp.type === 'CallExpression') {\n          // case: require('glslify').compile(...)\n          pending++\n          rcallcompile(pp, done)\n        } else if (p.type === 'TaggedTemplateExpression') {\n          // case: require('glslify')`...`\n          pending++\n          tagexpr(p, done)\n        }\n      } else if (node.type === 'Identifier' && node.name === glvar\n      && node.parent.type === 'CallExpression') {\n        // case: glvar(...)\n        pending++\n        callexpr(node.parent, done)\n      } else if (node.type === 'TaggedTemplateExpression'\n      && node.tag.name === glvar) {\n        // case: glvar`...`\n        pending++\n        tagexpr(node, done)\n      } else if (node.type === 'Identifier' && node.name === glvar\n      && node.parent.type === 'MemberExpression'\n      && node.parent.property.name === 'file'\n      && node.parent.parent.type === 'CallExpression'\n      && node.parent.parent.arguments[0]) {\n        pending++\n        callfile(node.parent.parent, done)\n      } else if (node.type === 'Identifier' && node.name === glvar\n      && node.parent.type === 'MemberExpression'\n      && node.parent.property.name === 'compile'\n      && node.parent.parent.type === 'CallExpression'\n      && node.parent.parent.arguments[0]) {\n        pending++\n        callcompile(node.parent.parent, done)\n      }\n    }\n    function tagexpr (node, cb) {\n      var q = node.quasi\n      var shadersrc = q.quasis.map(function (s) {\n        return s.value.raw + '__GLX_PLACEHOLDER__'\n      }).join('')\n      var d = createDeps({ cwd: mdir })\n      d.inline(shadersrc, mdir, function (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        node.update(node.tag.source() + '('\n          + JSON.stringify(bsrc.split('__GLX_PLACEHOLDER__'))\n          + [''].concat(q.expressions.map(function (e) {\n            return e.source()\n          })).join(',')\n          + ')')\n        cb()\n      })\n    }\n    function callexpr (p, cb) {\n      var marg = evaluate(p.arguments[0])\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps(extend({ cwd: mdir }, mopts))\n      if (/\\n/.test(marg)) { // source string\n        d.inline(marg, mdir, ondeps)\n      } else gresolve(marg, { basedir: mdir }, function (err, res) {\n        if (err) d.emit('error', err)\n        else d.add(res, ondeps)\n      })\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(p.callee.source()+'(['+JSON.stringify(bsrc)+'])')\n        cb()\n      }\n    }\n    function callcompile (p, cb) {\n      var mfile = p.arguments[0].value\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      d.inline(mfile, mdir, ondeps)\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(glvar + '([' + JSON.stringify(bsrc) + '])')\n        cb()\n      }\n    }\n    function callfile (p, cb) {\n      var mfile = p.arguments[0].value\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      gresolve(mfile, { basedir: mdir }, function (err, res) {\n        if (err) return d.emit('error', err)\n        d.add(res, ondeps)\n      })\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(glvar + '([' + JSON.stringify(bsrc) + '])')\n        cb()\n      }\n    }\n    function rcallfile (p, cb) {\n      var mfile = evaluate(p.arguments[0])\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      gresolve(mfile, { basedir: mdir }, function (err, res) {\n        if (err) return d.emit('error', err)\n        d.add(res, ondeps)\n      })\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(p.callee.object.source()+'(['+JSON.stringify(bsrc)+'])')\n        cb()\n      }\n    }\n    function rcallcompile (p, cb) {\n      var marg = evaluate(p.arguments[0])\n      var mopts = p.arguments[1] ? evaluate(p.arguments[1]) || {} : {}\n      var d = createDeps({ cwd: mdir })\n      d.inline(marg, mdir, ondeps)\n      function ondeps (err, deps) {\n        if (err) return d.emit('error', err)\n        try { var bsrc = bundle(deps) }\n        catch (err) { return d.emit('error', err) }\n        p.update(p.callee.object.source()+'(['+JSON.stringify(bsrc)+'])')\n        cb()\n      }\n    }\n    function done () {\n      if (--pending === 0) {\n        out.push(fout.toString())\n        out.push(null)\n      }\n    }\n  }))\n  return d\n\n  function createDeps (opts) {\n    var depper = gdeps(opts)\n    depper.on('error', function (err) { d.emit('error', err) })\n    depper.on('file', function (file) { d.emit('file', file) })\n    var transforms = opts.transform || []\n    transforms = Array.isArray(transforms) ? transforms : [transforms]\n    transforms.forEach(function(transform) {\n      transform = Array.isArray(transform) ? transform : [transform]\n      var name = transform[0]\n      var opts = transform[1] || {}\n      if (opts.post) {\n        posts.push({ name: name, opts: opts })\n      } else {\n        depper.transform(name, opts)\n      }\n    })\n    return depper\n  }\n  function bundle (deps) {\n    var source = gbundle(deps)\n    posts.forEach(function (tr) {\n      var target = nodeResolve.sync(tr.name, {\n        basedir: base\n      })\n      var transform = require(target)\n      var src = transform(null, source, { post: true })\n      if (src) source = src\n    })\n    return source\n  }\n}\n"},"lineCount":254}},"hash":"9f96860197b3796790ac8dadd31e18ca","cacheData":{"env":{}}}